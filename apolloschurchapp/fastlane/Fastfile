# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

def bump_version_code
  s = File.read('../android/app/build.gradle')
  versionCode = number_of_commits
  s[/versionCode\s+(\d+)/, 1] = versionCode.to_s
  f = File.new('../android/app/build.gradle', 'w')
  f.write(s)
  f.close
end

before_all do
  ensure_git_branch
  ensure_git_status_clean
  git_pull
end

def apollos_console(platform, status)
  require 'json'
  require 'net/http'

  uri = URI('https://data.mongodb-api.com/app/data-ugktb/endpoint/data/beta/action/updateOne')
  req = Net::HTTP::Post.new(uri)
  req['Content-Type'] = 'application/json'
  req['Access-Control-Request-Headers'] = '*'
  req['api-key'] = ENV['APOLLOS_CONSOLE_MONGO_API_KEY']

  req.body = {
    "dataSource": 'Cluster0',
    "database": 'apollos',
    "collection": 'deployments',
    "filter": { "church": 'LCBC' },
    "update": {
      "$set": {
        platform => status,
        "version": number_of_commits,
        "updated_at": { "$date": { "$numberLong": (Time.now.to_f * 1000).to_i.to_s } }
      }
    }
  }.to_json

  Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == 'https') do |http|
    http.request(req)
  end
end

platform :ios do
  desc 'Generate new provisioning profiles and certificates for app and push notifications'
  lane :certs do
    app_store_connect_api_key(key_filepath: 'ios/apollos.p8')
    match_nuke(type: 'development',
               app_identifier: [ENV['DELIVER_APP_IDENTIFIER'],
                                "#{ENV['DELIVER_APP_IDENTIFIER']}.OneSignalNotificationServiceExtension"])
    match_nuke(type: 'appstore',
               app_identifier: [ENV['DELIVER_APP_IDENTIFIER'],
                                "#{ENV['DELIVER_APP_IDENTIFIER']}.OneSignalNotificationServiceExtension"])
    match(type: 'development',
          app_identifier: [ENV['DELIVER_APP_IDENTIFIER'],
                           "#{ENV['DELIVER_APP_IDENTIFIER']}.OneSignalNotificationServiceExtension"])
    match(type: 'appstore',
          app_identifier: [ENV['DELIVER_APP_IDENTIFIER'],
                           "#{ENV['DELIVER_APP_IDENTIFIER']}.OneSignalNotificationServiceExtension"])
    get_push_certificate(app_identifier: ENV['DELIVER_APP_IDENTIFIER'])
  end

  desc 'Push a new internal build to TestFlight'
  lane :deploy do
    apollos_console('ios', 'Started')

    # get project name
    proj = Dir.glob('../ios/*.xcworkspace')[0][7..-13]

    app_store_connect_api_key(key_filepath: 'ios/apollos.p8', in_house: false)
    setup_ci
    match(
      type: 'appstore',
      app_identifier: [ENV['DELIVER_APP_IDENTIFIER'],
                           "#{ENV['DELIVER_APP_IDENTIFIER']}.OneSignalNotificationServiceExtension"],
      readonly: true
    )
    increment_build_number(build_number: number_of_commits, xcodeproj: 'ios/' << proj << '.xcodeproj')
    build_app(workspace: 'ios/' << proj << '.xcworkspace', scheme: proj)
    changelog_from_git_commits
    # upload_app_privacy_details_to_app_store(
    # app_identifier: ENV["DELIVER_APP_IDENTIFIER"]
    # )
    testflight
    apollos_console('ios', 'Passed')
  end

  desc 'Promote the most recent TestFlight build to external beta'
  lane :beta do
    app_store_connect_api_key(key_filepath: 'ios/apollos.p8', in_house: false)
    testflight(
      distribute_only: true,
      distribute_external: true,
      groups: ['Beta Testers']
    )
  end

  desc 'Promote the most recent Testflight version to production'
  lane :production do
    app_store_connect_api_key(key_filepath: 'ios/apollos.p8', in_house: false)
    deliver(
      skip_binary_upload: true,
      overwrite_screenshots: true,
      submit_for_review: true,
      automatic_release: true,
      submission_information: {
        add_id_info_uses_idfa: false
      },
      reject_if_possible: true,
      run_precheck_before_submit: false,
      app_version: get_version_number(xcodeproj: 'ios', target: 'OneSignalNotificationServiceExtension'),
      build_number: number_of_commits.to_s
    )
  end

  error do |_lane, _exception|
    apollos_console('ios', 'Failed')
  end
end

platform :android do
  desc 'Deploy a new version to the Google Play'
  lane :deploy do
    apollos_console('android', 'Started')
    bump_version_code
    gradle(task: 'clean', project_dir: 'android')
    gradle(task: 'bundle', build_type: 'Release', project_dir: 'android')
    changelog_from_git_commits

    s = File.read('../android/app/build.gradle')
    package_name = s[/applicationId\s+"([\w+.]*)"/, 1]

    upload_to_play_store(
      track: 'internal',
      skip_upload_apk: true,
      json_key: 'android/key.json',
      package_name: package_name
    )
    apollos_console('android', 'Passed')
  end

  desc 'Promote current build to beta'
  lane :beta do
    s = File.read('../android/app/build.gradle')
    package_name = s[/applicationId\s+"([\w+.]*)"/, 1]

    upload_to_play_store(
      track: 'internal',
      track_promote_to: 'beta',
      version_code: number_of_commits,
      skip_upload_apk: true,
      skip_upload_aab: true,
      json_key: 'android/key.json',
      package_name: package_name
    )
  end

  desc 'Promote current build to production'
  lane :production do
    s = File.read('../android/app/build.gradle')
    package_name = s[/applicationId\s+"([\w+.]*)"/, 1]

    upload_to_play_store(
      track: 'internal',
      track_promote_to: 'production',
      version_code: number_of_commits,
      skip_upload_apk: true,
      skip_upload_aab: true,
      json_key: 'android/key.json',
      package_name: package_name
    )
  end

  error do |_lane, _exception|
    apollos_console('android', 'Failed')
  end
end
